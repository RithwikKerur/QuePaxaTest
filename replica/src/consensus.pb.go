// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: replica/src/consensus.proto

package raxos

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProposerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender       int64                          `protobuf:"varint,1,opt,name=sender,proto3" json:"sender,omitempty"` // sender id
	Index        int64                          `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`   // replicated slot index
	P            *ProposerMessage_Proposal      `protobuf:"bytes,3,opt,name=P,proto3" json:"P,omitempty"`            // proposal
	S            int64                          `protobuf:"varint,4,opt,name=S,proto3" json:"S,omitempty"`           // step
	DecidedSlots []*ProposerMessage_DecidedSlot `protobuf:"bytes,5,rep,name=decidedSlots,proto3" json:"decidedSlots,omitempty"`
}

func (x *ProposerMessage) Reset() {
	*x = ProposerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerMessage) ProtoMessage() {}

func (x *ProposerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerMessage.ProtoReflect.Descriptor instead.
func (*ProposerMessage) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *ProposerMessage) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *ProposerMessage) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ProposerMessage) GetP() *ProposerMessage_Proposal {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *ProposerMessage) GetS() int64 {
	if x != nil {
		return x.S
	}
	return 0
}

func (x *ProposerMessage) GetDecidedSlots() []*ProposerMessage_DecidedSlot {
	if x != nil {
		return x.DecidedSlots
	}
	return nil
}

type RecorderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S                     int64                      `protobuf:"varint,1,opt,name=S,proto3" json:"S,omitempty"`                                         // step
	F                     *RecorderResponse_Proposal `protobuf:"bytes,2,opt,name=F,proto3" json:"F,omitempty"`                                          // first proposal
	M                     *RecorderResponse_Proposal `protobuf:"bytes,3,opt,name=M,proto3" json:"M,omitempty"`                                          // the maximum of all values (v) proposed in the prior epoch for S-1
	ClientBatchesNotFound bool                       `protobuf:"varint,4,opt,name=ClientBatchesNotFound,proto3" json:"ClientBatchesNotFound,omitempty"` // if any of the client batches are not found, set this to true
	peer                  int64
}

func (x *RecorderResponse) Reset() {
	*x = RecorderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecorderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecorderResponse) ProtoMessage() {}

func (x *RecorderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecorderResponse.ProtoReflect.Descriptor instead.
func (*RecorderResponse) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *RecorderResponse) GetS() int64 {
	if x != nil {
		return x.S
	}
	return 0
}

func (x *RecorderResponse) GetF() *RecorderResponse_Proposal {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *RecorderResponse) GetM() *RecorderResponse_Proposal {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *RecorderResponse) GetClientBatchesNotFound() bool {
	if x != nil {
		return x.ClientBatchesNotFound
	}
	return false
}

type DecideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"` // client batch ids
}

func (x *DecideRequest) Reset() {
	*x = DecideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideRequest) ProtoMessage() {}

func (x *DecideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideRequest.ProtoReflect.Descriptor instead.
func (*DecideRequest) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *DecideRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DecideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientBatches []*DecideResponse_ClientBatch `protobuf:"bytes,1,rep,name=client_batches,json=clientBatches,proto3" json:"client_batches,omitempty"` // client batches
}

func (x *DecideResponse) Reset() {
	*x = DecideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideResponse) ProtoMessage() {}

func (x *DecideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideResponse.ProtoReflect.Descriptor instead.
func (*DecideResponse) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *DecideResponse) GetClientBatches() []*DecideResponse_ClientBatch {
	if x != nil {
		return x.ClientBatches
	}
	return nil
}

type Decisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecidedSlots []*Decisions_DecidedSlot `protobuf:"bytes,5,rep,name=decidedSlots,proto3" json:"decidedSlots,omitempty"`
}

func (x *Decisions) Reset() {
	*x = Decisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decisions) ProtoMessage() {}

func (x *Decisions) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decisions.ProtoReflect.Descriptor instead.
func (*Decisions) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *Decisions) GetDecidedSlots() []*Decisions_DecidedSlot {
	if x != nil {
		return x.DecidedSlots
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{5}
}

type ProposerMessage_ClientBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   int64                                        `protobuf:"varint,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Messages []*ProposerMessage_ClientBatch_SingleMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Id       string                                       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // unique identifier for a batch
}

func (x *ProposerMessage_ClientBatch) Reset() {
	*x = ProposerMessage_ClientBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerMessage_ClientBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerMessage_ClientBatch) ProtoMessage() {}

func (x *ProposerMessage_ClientBatch) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerMessage_ClientBatch.ProtoReflect.Descriptor instead.
func (*ProposerMessage_ClientBatch) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProposerMessage_ClientBatch) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *ProposerMessage_ClientBatch) GetMessages() []*ProposerMessage_ClientBatch_SingleMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ProposerMessage_ClientBatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ProposerMessage_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority      int64                          `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ProposerId    int64                          `protobuf:"varint,2,opt,name=proposer_id,json=proposerId,proto3" json:"proposer_id,omitempty"`
	ThreadId      int64                          `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Ids           []string                       `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`                                          // client batch ids in the fast path
	ClientBatches []*ProposerMessage_ClientBatch `protobuf:"bytes,5,rep,name=client_batches,json=clientBatches,proto3" json:"client_batches,omitempty"` // client batches in the slow path
}

func (x *ProposerMessage_Proposal) Reset() {
	*x = ProposerMessage_Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerMessage_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerMessage_Proposal) ProtoMessage() {}

func (x *ProposerMessage_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerMessage_Proposal.ProtoReflect.Descriptor instead.
func (*ProposerMessage_Proposal) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ProposerMessage_Proposal) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ProposerMessage_Proposal) GetProposerId() int64 {
	if x != nil {
		return x.ProposerId
	}
	return 0
}

func (x *ProposerMessage_Proposal) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *ProposerMessage_Proposal) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ProposerMessage_Proposal) GetClientBatches() []*ProposerMessage_ClientBatch {
	if x != nil {
		return x.ClientBatches
	}
	return nil
}

type ProposerMessage_DecidedSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`       // replicated slot
	Ids      []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`            // client batch ids
	Proposer int64    `protobuf:"varint,3,opt,name=proposer,proto3" json:"proposer,omitempty"` // proposer who decided this index
}

func (x *ProposerMessage_DecidedSlot) Reset() {
	*x = ProposerMessage_DecidedSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerMessage_DecidedSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerMessage_DecidedSlot) ProtoMessage() {}

func (x *ProposerMessage_DecidedSlot) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerMessage_DecidedSlot.ProtoReflect.Descriptor instead.
func (*ProposerMessage_DecidedSlot) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ProposerMessage_DecidedSlot) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ProposerMessage_DecidedSlot) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ProposerMessage_DecidedSlot) GetProposer() int64 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

type ProposerMessage_ClientBatch_SingleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProposerMessage_ClientBatch_SingleMessage) Reset() {
	*x = ProposerMessage_ClientBatch_SingleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerMessage_ClientBatch_SingleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerMessage_ClientBatch_SingleMessage) ProtoMessage() {}

func (x *ProposerMessage_ClientBatch_SingleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerMessage_ClientBatch_SingleMessage.ProtoReflect.Descriptor instead.
func (*ProposerMessage_ClientBatch_SingleMessage) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ProposerMessage_ClientBatch_SingleMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RecorderResponse_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority   int64    `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ProposerId int64    `protobuf:"varint,2,opt,name=proposer_id,json=proposerId,proto3" json:"proposer_id,omitempty"`
	ThreadId   int64    `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Ids        []string `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"` // client batch ids
}

func (x *RecorderResponse_Proposal) Reset() {
	*x = RecorderResponse_Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecorderResponse_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecorderResponse_Proposal) ProtoMessage() {}

func (x *RecorderResponse_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecorderResponse_Proposal.ProtoReflect.Descriptor instead.
func (*RecorderResponse_Proposal) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RecorderResponse_Proposal) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RecorderResponse_Proposal) GetProposerId() int64 {
	if x != nil {
		return x.ProposerId
	}
	return 0
}

func (x *RecorderResponse_Proposal) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *RecorderResponse_Proposal) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DecideResponse_ClientBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   int64                                       `protobuf:"varint,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Messages []*DecideResponse_ClientBatch_SingleMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Id       string                                      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // unique identifier for a batch
}

func (x *DecideResponse_ClientBatch) Reset() {
	*x = DecideResponse_ClientBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecideResponse_ClientBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideResponse_ClientBatch) ProtoMessage() {}

func (x *DecideResponse_ClientBatch) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideResponse_ClientBatch.ProtoReflect.Descriptor instead.
func (*DecideResponse_ClientBatch) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DecideResponse_ClientBatch) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *DecideResponse_ClientBatch) GetMessages() []*DecideResponse_ClientBatch_SingleMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *DecideResponse_ClientBatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DecideResponse_ClientBatch_SingleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DecideResponse_ClientBatch_SingleMessage) Reset() {
	*x = DecideResponse_ClientBatch_SingleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecideResponse_ClientBatch_SingleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideResponse_ClientBatch_SingleMessage) ProtoMessage() {}

func (x *DecideResponse_ClientBatch_SingleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideResponse_ClientBatch_SingleMessage.ProtoReflect.Descriptor instead.
func (*DecideResponse_ClientBatch_SingleMessage) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *DecideResponse_ClientBatch_SingleMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Decisions_DecidedSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`       // replicated slot
	Ids      []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`            // in the fast path client request ids
	Proposer int64    `protobuf:"varint,3,opt,name=proposer,proto3" json:"proposer,omitempty"` // proposer who decided this index
}

func (x *Decisions_DecidedSlot) Reset() {
	*x = Decisions_DecidedSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_src_consensus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decisions_DecidedSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decisions_DecidedSlot) ProtoMessage() {}

func (x *Decisions_DecidedSlot) ProtoReflect() protoreflect.Message {
	mi := &file_replica_src_consensus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decisions_DecidedSlot.ProtoReflect.Descriptor instead.
func (*Decisions_DecidedSlot) Descriptor() ([]byte, []int) {
	return file_replica_src_consensus_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Decisions_DecidedSlot) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Decisions_DecidedSlot) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Decisions_DecidedSlot) GetProposer() int64 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

var File_replica_src_consensus_proto protoreflect.FileDescriptor

var file_replica_src_consensus_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x04,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x01, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x01, 0x50, 0x12, 0x0c, 0x0a, 0x01, 0x53, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x53, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69,
	0x64, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x29, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0xbb, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x53, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x53, 0x12, 0x28, 0x0a, 0x01, 0x46, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x01,
	0x46, 0x12, 0x28, 0x0a, 0x01, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x01, 0x4d, 0x12, 0x34, 0x0a, 0x15, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x1a, 0x76, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x0d, 0x44, 0x65, 0x63,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xfe, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x29, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x64,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x8e, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x12, 0x2a, 0x0a, 0x03, 0x45, 0x53, 0x50, 0x12, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x0e, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x06, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x72, 0x61, 0x78, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_replica_src_consensus_proto_rawDescOnce sync.Once
	file_replica_src_consensus_proto_rawDescData = file_replica_src_consensus_proto_rawDesc
)

func file_replica_src_consensus_proto_rawDescGZIP() []byte {
	file_replica_src_consensus_proto_rawDescOnce.Do(func() {
		file_replica_src_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(file_replica_src_consensus_proto_rawDescData)
	})
	return file_replica_src_consensus_proto_rawDescData
}

var file_replica_src_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_replica_src_consensus_proto_goTypes = []interface{}{
	(*ProposerMessage)(nil),                           // 0: ProposerMessage
	(*RecorderResponse)(nil),                          // 1: RecorderResponse
	(*DecideRequest)(nil),                             // 2: DecideRequest
	(*DecideResponse)(nil),                            // 3: DecideResponse
	(*Decisions)(nil),                                 // 4: Decisions
	(*Empty)(nil),                                     // 5: Empty
	(*ProposerMessage_ClientBatch)(nil),               // 6: ProposerMessage.ClientBatch
	(*ProposerMessage_Proposal)(nil),                  // 7: ProposerMessage.Proposal
	(*ProposerMessage_DecidedSlot)(nil),               // 8: ProposerMessage.DecidedSlot
	(*ProposerMessage_ClientBatch_SingleMessage)(nil), // 9: ProposerMessage.ClientBatch.SingleMessage
	(*RecorderResponse_Proposal)(nil),                 // 10: RecorderResponse.Proposal
	(*DecideResponse_ClientBatch)(nil),                // 11: DecideResponse.ClientBatch
	(*DecideResponse_ClientBatch_SingleMessage)(nil),  // 12: DecideResponse.ClientBatch.SingleMessage
	(*Decisions_DecidedSlot)(nil),                     // 13: Decisions.DecidedSlot
}
var file_replica_src_consensus_proto_depIdxs = []int32{
	7,  // 0: ProposerMessage.P:type_name -> ProposerMessage.Proposal
	8,  // 1: ProposerMessage.decidedSlots:type_name -> ProposerMessage.DecidedSlot
	10, // 2: RecorderResponse.F:type_name -> RecorderResponse.Proposal
	10, // 3: RecorderResponse.M:type_name -> RecorderResponse.Proposal
	11, // 4: DecideResponse.client_batches:type_name -> DecideResponse.ClientBatch
	13, // 5: Decisions.decidedSlots:type_name -> Decisions.DecidedSlot
	9,  // 6: ProposerMessage.ClientBatch.messages:type_name -> ProposerMessage.ClientBatch.SingleMessage
	6,  // 7: ProposerMessage.Proposal.client_batches:type_name -> ProposerMessage.ClientBatch
	12, // 8: DecideResponse.ClientBatch.messages:type_name -> DecideResponse.ClientBatch.SingleMessage
	0,  // 9: Consensus.ESP:input_type -> ProposerMessage
	2,  // 10: Consensus.FetchBatches:input_type -> DecideRequest
	4,  // 11: Consensus.InformDecision:input_type -> Decisions
	1,  // 12: Consensus.ESP:output_type -> RecorderResponse
	3,  // 13: Consensus.FetchBatches:output_type -> DecideResponse
	5,  // 14: Consensus.InformDecision:output_type -> Empty
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_replica_src_consensus_proto_init() }
func file_replica_src_consensus_proto_init() {
	if File_replica_src_consensus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_replica_src_consensus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecorderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerMessage_ClientBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerMessage_Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerMessage_DecidedSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerMessage_ClientBatch_SingleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecorderResponse_Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecideResponse_ClientBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecideResponse_ClientBatch_SingleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_src_consensus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decisions_DecidedSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_replica_src_consensus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_replica_src_consensus_proto_goTypes,
		DependencyIndexes: file_replica_src_consensus_proto_depIdxs,
		MessageInfos:      file_replica_src_consensus_proto_msgTypes,
	}.Build()
	File_replica_src_consensus_proto = out.File
	file_replica_src_consensus_proto_rawDesc = nil
	file_replica_src_consensus_proto_goTypes = nil
	file_replica_src_consensus_proto_depIdxs = nil
}
